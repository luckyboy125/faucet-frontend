import { useState, useEffect } from "react";
import makeBlockie from "ethereum-blockies-base64";

//-----------------material ui------------------------
import { Grid, Typography, Box } from "@material-ui/core";
import LinearProgress from "@material-ui/core/LinearProgress";
import Alert from "@material-ui/lab/Alert";
import ReCAPTCHA from "react-google-recaptcha";

//----------------redux-------------------------------------
import { useAppSelector, useAppDispatch } from "../store/hooks";
import { getFaucetUser, updateErrorMsg } from "../store/faucet";
import { faucetUser } from "../store/faucet/selectors";
import { error } from "../store/faucet/selectors";

import { CAPCTHA_ID } from "../config/constants";

function MainBody() {
  const users = useAppSelector(faucetUser);
  const err = useAppSelector(error);
  const dispatch = useAppDispatch();

  const [showErrorAlert, setShowErrorAlert] = useState(false);
  const [addressValue, setAddressValue] = useState("");
  const [isVerify, setIsVerify] = useState("");
  const formData = new FormData();
  let peers = 1;
  let funded = 10;
  let blocks = 12;

  const handleSelectedBtn = (value: any) => {
    if (addressValue === "") {
      dispatch(
        updateErrorMsg({
          message: "Address input is emptied!",
          severity: "error",
        })
      );
      return;
    }
    if (isVerify !== "") {
      setShowErrorAlert(false);
      formData.append("actiontype", value.toString());
      formData.append("address", addressValue);

      dispatch(getFaucetUser(formData));
      return;
    }
    dispatch(
      updateErrorMsg({
        message: "You have to pass Recaptcha!",
        severity: "error",
      })
    );
  };

  const handleInput = (e: any) => {
    setAddressValue(e.target.value);
  };

  const onVerify = (e: any) => {
    setIsVerify(e);
  };

  const onCapchaError = () => {
    dispatch(
      updateErrorMsg({
        message: "You have to pass Recaptcha!",
        severity: "error",
      })
    );
  };

  useEffect(() => {
    err === "" ? setShowErrorAlert(false) : setShowErrorAlert(true);
  }, [err]);

  return (
    <div className='container'>
      <title>Faucet | Zilionixx Testnet</title>
      <meta name='description' content='Generated by create next app' />

      <main className='main'>
        <Grid container>
          <Grid item xs={12} sm={12} md={12} className='header'>
            <Typography variant='h3' className='headerTitle'>
              <i className='fa fa-bath titleIcon'></i>
              &nbsp; Zilionixx Testnet Authenticated Faucet{" "}
            </Typography>
          </Grid>
          <Grid item container xs={12} sm={12} md={12} className='selectPart'>
            <div className='input-group mb-3 coinSelectPart'>
              <input
                type='text'
                onChange={(e) => handleInput(e)}
                className='form-control coinSelectInput'
                placeholder='Your ZNX address...'
              />
              <button
                className='btn btn-outline-secondary dropdown-toggle coinSelectButton'
                data-bs-toggle='dropdown'>
                Give me ZNX
              </button>
              <ul className='dropdown-menu selectDropdownMenu dropdown-menu-end'>
                <li>
                  <button
                    className='dropdown-item'
                    onClick={() => handleSelectedBtn(1)}>
                    1 ZNXs / 8 hours
                  </button>
                </li>
                <li>
                  <button
                    className='dropdown-item'
                    onClick={() => handleSelectedBtn(2)}>
                    3 ZNXs / 1 day
                  </button>
                </li>
                <li>
                  <button
                    className='dropdown-item'
                    onClick={() => handleSelectedBtn(3)}>
                    5 ZNXs / 3 days
                  </button>
                </li>
              </ul>
            </div>
            {showErrorAlert === true && (
              <Alert severity='error' className='alert'>
                {err}
              </Alert>
            )}
          </Grid>
          <Grid item container className='viewPart'>
            <Grid item container className='view'>
              {users
                ?.slice(0)
                .reverse()
                .map((item: any, key: any) => {
                  return (
                    <div key={key}>
                      <Box className='avatarPart'>
                        <img
                          src={makeBlockie(item.Address)}
                          className='avatar'
                          alt='avatar'></img>
                      </Box>
                      <Box className='addressPart'>
                        <Box className='address'>{item.Address}</Box>
                      </Box>

                      {item.Status === 0 ? (
                        <Box className='status'>
                          <Box>funded</Box>
                          <Box className='statusBar'></Box>
                        </Box>
                      ) : (
                        <Box className='status'>
                          <Box>about {item.Status} hours ago</Box>
                          <LinearProgress color='secondary' />
                        </Box>
                      )}
                    </div>
                  );
                })}
            </Grid>
            <Grid item container className='iconsPart'>
              <Grid item xs={2} sm={2} md={2} className='iconsPeers'>
                <i className='fas fa-rss'>
                  <span className='iconLetterFont'>{peers}</span>
                </i>{" "}
                &nbsp;peers
              </Grid>
              <Grid item xs={3} sm={3} md={3} className='iconsBlocks'>
                <i className='fa fa-database'>
                  <span className='iconLetterFont'>{blocks}</span>
                </i>{" "}
                &nbsp; blocks
              </Grid>
              <Grid item xs={4} sm={4} md={4} className='iconsCoins'>
                <i className='fa fa-heartbeat'>
                  <span className='iconLetterFont'>88,888,888</span>
                </i>
                &nbsp; ZNXs
              </Grid>
              <Grid item xs={3} sm={3} md={3} className='iconsFunded'>
                <i className='fa fa-university'>
                  <span className='iconLetterFont'>{funded}</span>{" "}
                </i>{" "}
                &nbsp; funded
              </Grid>
            </Grid>
          </Grid>
          <Grid item xs={12} sm={12} md={12}>
            <div className='reaptcha'>
              <ReCAPTCHA
                sitekey={CAPCTHA_ID}
                onChange={onVerify}
                onError={onCapchaError}
              />
            </div>
          </Grid>

          <Grid item container className='descriptionPart'>
            <Grid item xs={12} sm={12} md={12} className='descriptionTitle'>
              How does this work?
            </Grid>
            <Grid item xs={12} sm={12} md={12} className='descriptionMain'>
              <Typography className='descriptionFirst'>
                This ZNX faucet is running on the Zilionixx testnet. To prevent
                malicious actors from exhausting all available funds or
                accumulating enough ZNX to mount long running spam attacks,
                requests are blocked during the period depending on selection.
              </Typography>
              <Typography className='descriptionFirst'>
                You can track the current pending requests below the input field
                to see how much you have to wait until your turn comes.
              </Typography>
              <br></br>
              <em>The faucet is running reCaptcha protection against bots.</em>
            </Grid>
          </Grid>
        </Grid>
      </main>
    </div>
  );
}

export default MainBody;
